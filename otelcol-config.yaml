extensions:
  health_check:
   endpoint: "0.0.0.0:13133"
  pprof:
    endpoint: 0.0.0.0:1888
  zpages:
    endpoint: 0.0.0.0:55679
  basicauth/grafana_cloud:
    client_auth: 
      username: "910451"
      password: "glc_eyJvIjoiMTAyODc5MiIsIm4iOiJzdGFjay05MTA0NTEtb3RscC13cml0ZS1vdGxwIiwiayI6Imh0T1VDTXRNSjM0MngyRjA1UTFyajAyNyIsIm0iOnsiciI6InByb2QtdXMtd2VzdC0wIn19"  
  basicauth/otlp:
    client_auth:
      username: "868232"
      password: "glc_eyJvIjoiMTAyODc5MiIsIm4iOiJzdGFjay05MTA0NTEtaGwtcmVhZC1vdGxwaHR0cGxva2kiLCJrIjoiMTc3RW9ZRHB4ZGhFQzBIV0w5NW8yMTk4IiwibSI6eyJyIjoicHJvZC11cy13ZXN0LTAifX0="
  basicauth/prometheus:
    client_auth:
      username: "1535416"
      password: "glc_eyJvIjoiMTAyODc5MiIsIm4iOiJzdGFjay05MTA0NTEtaG0td3JpdGUtcHJvbWV0aGV1cyIsImsiOiJSOHM1YmlySjRDMGFQdjE5NmN6MWo4WTYiLCJtIjp7InIiOiJwcm9kLXVzLXdlc3QtMCJ9fQ=="

connectors:
  grafanacloud:
    host_identifiers: ["host.name"]
    metrics_flush_interval: 60s    

receivers:
  otlp:
    protocols:
      http: 
       endpoint: 0.0.0.0:4318
  hostmetrics:
    collection_interval: 10s
    scrapers:
      paging:
        metrics:
          system.paging.utilization:
            enabled: true
      load:
        cpu_average: true
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      disk:
      filesystem:
        metrics:
          system.filesystem.utilization:
            enabled: true
      memory:
      network:
        metrics:
          system.network.connections:
            enabled: true
      process:
  filelog:
    include: ["/ecs/relayer-${env:SYG_RELAYER_ID}-${env:SYG_RELAYER_ENV}/*.log" ] #"/ecs/relayer-1-STAGE"
    operators:
      - type: json_parser
        timestamp:
          parse_from: attributes.time
          layout: '%Y-%m-%d %H:%M:%S'
  otlpjsonfile:
    include:
      - "/var/log/*.log"
    exclude:
      - "/var/log/example.log"
      
processors:
  batch:
    timeout: 10s
    send_batch_max_size: 1000
    send_batch_size: 100
  resourcedetection:
    detectors: [ecs, ec2, system, env]
  attributes:
    actions:
      - action: insert
        key: loki.attribute.labels
        value: event.domain
  resource:
    attributes:
      - action: insert
        key: loki.resource.labels
        value: service.name
      - action: insert
        key: loki.format
        value: logfmt

exporters:
  debug:
    verbosity: detailed
  # datadog:
  #   retry_on_failure:
  #     enabled: true
  #   api:
  #     site: 'datadoghq.com'
  #     key: 'eb7c2acc9758f779ac7a65eaecb9b8b5'
  otlphttp/grafana_cloud:
    traces_endpoint: https://otlp-gateway-prod-us-west-0.grafana.net/otlp/v1/traces #https://chainsafe.grafana.net/loki/api/v1/push
    metrics_endpoint: https://otlp-gateway-prod-us-west-0.grafana.net/otlp/v1/metrics
    logs_endpoint: https://logs-prod-021.grafana.net:3100/otlp
    auth:
      authenticator: basicauth/grafana_cloud
    encoding: json

  # prometheusremotewrite:
  #   endpoint: "https://prometheus-prod-36-prod-us-west-0.grafana.net/api/prom/push"
  #   auth:
  #     authenticator: basicauth/prometheus
  #   remote_write_queue:
  #     enabled: false // its sending emtrics, lets test the otlp/v1/metrics now along with logs

  otlphttp/loki:
    endpoint: https://logs-prod-021.grafana.net:3100/otlp/vi/logs # https://logs-prod-021.grafana.net:3100/otlp
    auth:
      authenticator:  basicauth/otlp
    # default_labels_enabled:
    #   exporter: 
    #   job:    

service:
  extensions: [health_check, pprof, zpages, basicauth/grafana_cloud, basicauth/otlp, basicauth/prometheus]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [debug, otlphttp/grafana_cloud]
    metrics:
      receivers: [otlp, hostmetrics]
      processors: [resourcedetection, batch]
      exporters: [otlphttp/grafana_cloud, debug]
    logs:
      receivers: [otlp, filelog, otlpjsonfile]
      processors: [batch]
      exporters: [loki, otlphttp/grafana_cloud, debug]
